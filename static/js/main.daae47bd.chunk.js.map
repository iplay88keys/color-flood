{"version":3,"sources":["actions/index.js","utils/constants.js","utils/formulas.js","reducers/createBoard.js","reducers/squareClicked.js","reducers/index.js","serviceWorker.js","components/squares.jsx","components/border.jsx","components/canvas.jsx","components/newGame.jsx","components/currentCount.jsx","App.js","containers/game.js","index.js","store.js"],"names":["SQUARE_CLICKED","CREATE_BOARD","numRows","numColumns","gameHeight","updateSquares","squares","pos","oldColor","newColor","r","c","doUpdate","i","currentPos","posToXY","color","newPos","xyToPos","x","y","position","Math","floor","createBoard","initialGameState","squareSize","colors","random","length","push","width","height","gameState","Object","objectSpread","squareClicked","state","currentCount","maxMoves","initialState","reducer","arguments","undefined","action","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","Squares","props","react_default","a","createElement","Fragment","map","square","index","fill","stroke","onClick","id","key","Border","x1","x2","y1","y2","strokeWidth","propTypes","PropTypes","shape","arrayOf","number","isRequired","string","func","Canvas","viewBox","preserveAspectRatio","components_squares","border","NewGame","onMouseUp","CurrentCount","App","canvas","document","getElementById","style","concat","this","react","className","newGame","components_currentCount","Component","Game","connect","dispatch","ReactDOM","render","es","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","game","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.daae47bd.chunk.js","sourcesContent":["export const SQUARE_CLICKED = 'SQUARE_CLICKED';\nexport const CREATE_BOARD = 'CREATE_BOARD';\n\nexport const squareClicked = (position) => ({\n  type: SQUARE_CLICKED,\n  position,\n});\n\nexport const createBoard = () => ({\n  type: CREATE_BOARD,\n});\n","export const numRows = 10;\nexport const numColumns = 10;\nexport const gameWidth = 800;\nexport const gameHeight = 800;\n","import { numColumns, numRows } from \"./constants\";\n\nexport const updateSquares = (squares, pos, oldColor, newColor) => {\n  let r = [0, 1, 0, -1];\n  let c = [-1, 0, 1, 0];\n\n  function doUpdate(pos) {\n    let currentPos = posToXY(pos);\n    if (oldColor === newColor || squares[pos].color !== oldColor) {\n      return;\n    }\n\n    squares[pos].color = newColor;\n\n    let i;\n    for (i = 0; i < 4; i++) {\n      let newPos = xyToPos(currentPos.x + r[i], currentPos.y + c[i]);\n      if (newPos >= 0 && newPos < numColumns * numRows) {\n        doUpdate(newPos);\n      }\n    }\n  }\n\n  doUpdate(pos);\n\n  return squares;\n};\n\nexport const posToXY = (position) => {\n  if (position < 0 || position > numRows * numColumns) {\n    return {\n      x: -1,\n      y: -1,\n    }\n  }\n\n  return {\n    x: position % numColumns,\n    y: Math.floor(position / numColumns),\n  }\n};\n\nexport const xyToPos = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1\n  }\n\n  return x + (numRows * y)\n};\n","import { gameHeight, numColumns, numRows } from \"../utils/constants\";\nimport { xyToPos } from \"../utils/formulas\";\n\nfunction createBoard(initialGameState) {\n  let squares = [];\n  let squareSize = (gameHeight) / numRows;\n  let colors = [\"blue\", \"red\", \"green\", \"yellow\", \"orange\", \"pink\", \"purple\"];\n\n  let x, y;\n  for (x = 0; x < numColumns; x++) {\n    for (y = 0; y < numRows; y++) {\n      let color = colors[Math.floor(Math.random() * colors.length)];\n      squares.push({\n        x: y * squareSize,\n        y: x * squareSize,\n        width: squareSize,\n        height: squareSize,\n        color: color,\n        position: xyToPos(y, x),\n      })\n    }\n  }\n\n  return {\n    gameState: {\n      ...initialGameState,\n      squares: squares,\n    }\n  }\n}\n\nexport default createBoard;\n","import { updateSquares } from \"../utils/formulas\";\n\nfunction squareClicked(state, position) {\n  if (state.gameState.currentCount === state.gameState.maxMoves) {\n    return { ...state }\n  }\n\n  let squares = state.gameState.squares;\n  let currentCount = state.gameState.currentCount;\n\n  let oldColor = squares[0].color;\n  let newColor = squares[position].color;\n\n  if (oldColor !== newColor) {\n    squares = updateSquares(squares, 0, oldColor, newColor);\n    currentCount = currentCount + 1;\n  }\n\n  return {\n    ...state,\n    gameState: {\n      ...state.gameState,\n      squares: squares,\n      currentCount: currentCount,\n    }\n  }\n}\n\nexport default squareClicked;\n","import {\n  SQUARE_CLICKED, CREATE_BOARD\n} from '../actions';\nimport createBoard from \"./createBoard\";\nimport squareClicked from \"./squareClicked\"\n\nconst initialGameState = {\n  squares: [],\n  currentCount: 0,\n  maxMoves: 25,\n};\n\nconst initialState = {\n  gameState: initialGameState,\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case SQUARE_CLICKED:\n      return squareClicked(state, action.position);\n    case CREATE_BOARD:\n      return createBoard(initialGameState);\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from \"prop-types\"\n\nconst Squares = (props) => {\n  return (\n    <React.Fragment>\n      {\n        props.gameState.squares.map((square, index) => {\n          return <rect\n            x={ square.x }\n            y={ square.y }\n            width={ square.width }\n            height={ square.height }\n            fill={ square.color }\n            stroke={ square.color }\n            onClick={ () => props.squareClicked(square.position) }\n            id={ \"square-\" + index }\n            key={ \"square-\" + index }\n          />;\n        })\n      }\n    </React.Fragment>\n  );\n};\n\nSquares.propTypes = {\n  gameState: PropTypes.shape({\n    squares: PropTypes.arrayOf(PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n      height: PropTypes.number.isRequired,\n      color: PropTypes.string.isRequired,\n      position: PropTypes.number.isRequired,\n    })).isRequired,\n  }).isRequired,\n  squareClicked: PropTypes.func.isRequired,\n};\n\nexport default Squares;\n","import React from 'react';\nimport { gameWidth, gameHeight } from '../utils/constants';\n\nconst Border = () => {\n  return (\n    <React.Fragment>\n      <line x1={ 0 } x2={ gameWidth } y1={ 2 } y2={ 2 } stroke={ \"black\" } strokeWidth={ 5 } id={ \"top\" }/>\n      <line x1={ 0 } x2={ gameWidth } y1={ gameHeight - 2 } y2={ gameHeight - 2 } stroke={ \"black\" } strokeWidth={ 5 }\n            id={ \"bottom\" }/>\n      <line x1={ 0 } x2={ 0 } y1={ 0 } y2={ gameHeight } stroke={ \"black\" } strokeWidth={ 5 } id={ \"left\" }/>\n      <line x1={ gameWidth } x2={ gameWidth } y1={ 0 } y2={ gameHeight } stroke={ \"black\" } strokeWidth={ 5 }\n            id={ \"right\" }/>\n    </React.Fragment>\n  );\n};\n\nexport default Border;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { gameHeight, gameWidth } from \"../utils/constants\";\nimport Squares from \"./squares\";\nimport Border from \"./border\";\n\nconst Canvas = (props) => {\n  const viewBox = [0, 0, gameWidth, gameHeight];\n\n  return (\n    <svg\n      id=\"color-flood-canvas\"\n      preserveAspectRatio=\"xMidYMid meet\"\n      height=\"100%\"\n      width=\"100%\"\n      viewBox={ viewBox }\n    >\n      <Squares gameState={ props.gameState } squareClicked={ props.squareClicked }/>\n      <Border/>\n    </svg>\n  );\n};\n\nSquares.propTypes = {\n  gameState: PropTypes.shape({\n    squares: PropTypes.arrayOf(PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n      height: PropTypes.number.isRequired,\n      color: PropTypes.string.isRequired,\n      position: PropTypes.number.isRequired,\n    })).isRequired,\n  }).isRequired,\n  squareClicked: PropTypes.func.isRequired,\n};\n\nexport default Canvas;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NewGame = (props) => {\n  return (\n    <div id={ \"newGame\" }>\n      <button\n        onMouseUp={ () => {\n          props.createBoard();\n        } }\n      >\n        New Game\n      </button>\n    </div>\n  );\n};\n\nNewGame.propTypes = {\n  createBoard: PropTypes.func.isRequired,\n};\n\nexport default NewGame;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CurrentCount = (props) => {\n  return (\n    <div id={ \"currentCount\" }>\n      <div>\n        { props.gameState.currentCount + \"/\" + props.gameState.maxMoves }\n      </div>\n    </div>\n  );\n};\n\nCurrentCount.propTypes = {\n  gameState: PropTypes.shape({\n    currentCount: PropTypes.number.isRequired,\n    maxMoves: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default CurrentCount;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Canvas from './components/canvas';\nimport NewGame from \"./components/newGame\";\nimport CurrentCount from \"./components/currentCount\";\n\nclass App extends Component {\n  componentDidMount() {\n    // window.onresize = () => {\n    //   const gridContainer = document.getElementsByClassName(\"gridContainer\").item(0);\n    //   const canvas = document.getElementById(\"color-flood-canvas\");\n    //   gridContainer.style.width = `${ canvas.style.width }px`;\n    // };\n    // window.onresize();\n\n    const canvas = document.getElementById(\"color-flood-canvas\");\n    canvas.style.width = `${ canvas.style.height }px`;\n\n    this.props.createBoard();\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div id={ \"content\" }>\n          <div className={ \"gridContainer\" }>\n            <div className={ \"title\" }>\n              Color Flood\n            </div>\n            <div className={ \"informationContainer\" }>\n              <div className={ \"informationLeft\" }>\n                <NewGame createBoard={ this.props.createBoard }/>\n              </div>\n              <div className={ \"informationRight\" }>\n                <CurrentCount gameState={ this.props.gameState }/>\n              </div>\n            </div>\n            <div className={ \"game\" }>\n              <Canvas\n                gameState={ this.props.gameState }\n                squareClicked={ this.props.squareClicked }\n                createBoard={ this.props.createBoard }\n              />\n            </div>\n            <div className={ \"settings\" }></div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nApp.propTypes = {\n  gameState: PropTypes.shape({\n    squares: PropTypes.arrayOf(PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n      height: PropTypes.number.isRequired,\n      color: PropTypes.string.isRequired,\n      position: PropTypes.number.isRequired,\n    })).isRequired,\n    currentCount: PropTypes.number.isRequired,\n    maxMoves: PropTypes.number.isRequired,\n  }).isRequired,\n  createBoard: PropTypes.func.isRequired,\n  squareClicked: PropTypes.func.isRequired,\n};\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../App';\nimport { squareClicked, createBoard } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  gameState: state.gameState,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  squareClicked: (position) => {\n    dispatch(squareClicked(position));\n  },\n  createBoard: () => {\n    dispatch(createBoard());\n  },\n});\n\nconst Game = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './containers/game';\n\nReactDOM.render(\n  <Provider store={ configureStore() }>\n    <Game/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { createStore } from 'redux';\nimport rootReducer from './reducers/index';\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  );\n}\n"],"sourceRoot":""}